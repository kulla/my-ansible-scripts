#!/bin/bash
#
# Utility functions for backups.

CMD="$1"                        # command given via command line argument
DEFAULT_CMD="run"               # default command
MOUNT_DIR="{{ backup_mntdir }}" # mount point for backup disk
MAPPER=$(basename "$MOUNT_DIR") # name for mapper device
BACKUP_DIR="{{ backup_dir }}"   # directory where the backups are stored

# device ids for backup disks
DEVICE_IDS="""
scsi-SPI-239_USB_2.0_Drive_S24QJ9AC603190
scsi-SPI-239_USB_2.0_Drive_S24QJ9EC604225
usb-ST350083_0AS_95B1EFFFFFFF-0:0
756db0a1-b1ee-44eb-a158-8950d175a8d5
ata-ST500LM011_HM501II_S24QJ9AC603190
0b24047e-a9bd-4409-bc0c-8bc067d05898
"""

function error() {
	echo "ERROR: $*" >&2
	exit 1
}

function backup_disk_is_mounted() {
	mountpoint -q "$MOUNT_DIR"
}

function mount_backup_disk() {
	if ! backup_disk_is_mounted; then
		for DEVICE_ID in $DEVICE_IDS; do
			DEVICE="/dev/disk/by-uuid/${DEVICE_ID}"

			if [ -e "$DEVICE" ]; then
				sudo cryptsetup luksOpen "$DEVICE" "$MAPPER" && \
				sudo mount -t ext4 "/dev/mapper/${MAPPER}" "$MOUNT_DIR"

				break
			fi
		done
	fi

	backup_disk_is_mounted
}

function umount_backup_disk() {
	if [ -n "$(mount -l | grep "$MOUNT_DIR")" ]; then
		sudo umount "$MOUNT_DIR" && \
		sudo cryptsetup close "$MAPPER"
	fi

	! backup_disk_is_mounted
}

function should_be_recovered() {
	if [ -e "$1" ]; then
		if [ -d "$1" ]; then
			if [ -z "$(find "$1" -maxdepth 0 -empty)" ]; then
				# $1 is a directory and contains files
				return 1
			fi
		else
			# $1 exists and is no directory
			return 1
		fi
	fi
}

function recover_backuped_files() {
	while (( "$#" )); do
		FILE="${1%%/}"

		if should_be_recovered "$FILE"; then
			if mount_backup_disk ; then
				if [ -d "$FILE" ]; then
					rmdir "$FILE"
				fi

				cp -r -u "${BACKUP_DIR}/daily.0/${FILE}" "${FILE}" || \
					error "cp failed for '$FILE'"

				if [ -n "$OWNER" ]; then
					chown -R "$OWNER" "$FILE" || \
						error "chown failed for '$FILE'"
				fi

				if [ -n "$GROUP" ]; then
					chgrp -R "$GROUP" "$FILE" || \
						error "chgrp failed for '$FILE'"
				fi
			else
				error "backup disk not mounted"
			fi
		fi

		shift
	done
}

function show_help() {
	echo """backup [cmd] [files]

help    - show this help
mount   - mount backup disc
recover - recover given files from backup if they do not exist yet
umount  - umount backup disc"""
}

if [ -z "$CMD" ]; then
	CMD="$DEFAULT_CMD"
fi

if [ "$CMD" == "mount" ]; then
	mount_backup_disk
elif [ "$CMD" == "umount" ]; then
	umount_backup_disk
elif [ "$CMD" == "recover" ]; then
	shift

	recover_backuped_files $@
elif [ "$CMD" == "help" ]; then
	show_help
fi
